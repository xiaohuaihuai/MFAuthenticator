/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.21.12
 * source: migration.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export class Payload extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        otp_parameters?: Payload.OtpParameters[];
        version?: number;
        batch_size?: number;
        batch_index?: number;
        batch_id?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("otp_parameters" in data && data.otp_parameters != undefined) {
                this.otp_parameters = data.otp_parameters;
            }
            if ("version" in data && data.version != undefined) {
                this.version = data.version;
            }
            if ("batch_size" in data && data.batch_size != undefined) {
                this.batch_size = data.batch_size;
            }
            if ("batch_index" in data && data.batch_index != undefined) {
                this.batch_index = data.batch_index;
            }
            if ("batch_id" in data && data.batch_id != undefined) {
                this.batch_id = data.batch_id;
            }
        }
    }
    get otp_parameters() {
        return pb_1.Message.getRepeatedWrapperField(this, Payload.OtpParameters, 1) as Payload.OtpParameters[];
    }
    set otp_parameters(value: Payload.OtpParameters[]) {
        pb_1.Message.setRepeatedWrapperField(this, 1, value);
    }
    get version() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set version(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get batch_size() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
    }
    set batch_size(value: number) {
        pb_1.Message.setField(this, 3, value);
    }
    get batch_index() {
        return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
    }
    set batch_index(value: number) {
        pb_1.Message.setField(this, 4, value);
    }
    get batch_id() {
        return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
    }
    set batch_id(value: number) {
        pb_1.Message.setField(this, 5, value);
    }
    static fromObject(data: {
        otp_parameters?: ReturnType<typeof Payload.OtpParameters.prototype.toObject>[];
        version?: number;
        batch_size?: number;
        batch_index?: number;
        batch_id?: number;
    }): Payload {
        const message = new Payload({});
        if (data.otp_parameters != null) {
            message.otp_parameters = data.otp_parameters.map(item => Payload.OtpParameters.fromObject(item));
        }
        if (data.version != null) {
            message.version = data.version;
        }
        if (data.batch_size != null) {
            message.batch_size = data.batch_size;
        }
        if (data.batch_index != null) {
            message.batch_index = data.batch_index;
        }
        if (data.batch_id != null) {
            message.batch_id = data.batch_id;
        }
        return message;
    }
    toObject() {
        const data: {
            otp_parameters?: ReturnType<typeof Payload.OtpParameters.prototype.toObject>[];
            version?: number;
            batch_size?: number;
            batch_index?: number;
            batch_id?: number;
        } = {};
        if (this.otp_parameters != null) {
            data.otp_parameters = this.otp_parameters.map((item: Payload.OtpParameters) => item.toObject());
        }
        if (this.version != null) {
            data.version = this.version;
        }
        if (this.batch_size != null) {
            data.batch_size = this.batch_size;
        }
        if (this.batch_index != null) {
            data.batch_index = this.batch_index;
        }
        if (this.batch_id != null) {
            data.batch_id = this.batch_id;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.otp_parameters.length)
            writer.writeRepeatedMessage(1, this.otp_parameters, (item: Payload.OtpParameters) => item.serialize(writer));
        if (this.version != 0)
            writer.writeInt32(2, this.version);
        if (this.batch_size != 0)
            writer.writeInt32(3, this.batch_size);
        if (this.batch_index != 0)
            writer.writeInt32(4, this.batch_index);
        if (this.batch_id != 0)
            writer.writeInt32(5, this.batch_id);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Payload {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Payload();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.otp_parameters, () => pb_1.Message.addToRepeatedWrapperField(message, 1, Payload.OtpParameters.deserialize(reader), Payload.OtpParameters));
                    break;
                case 2:
                    message.version = reader.readInt32();
                    break;
                case 3:
                    message.batch_size = reader.readInt32();
                    break;
                case 4:
                    message.batch_index = reader.readInt32();
                    break;
                case 5:
                    message.batch_id = reader.readInt32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Payload {
        return Payload.deserialize(bytes);
    }
}
export namespace Payload {
    export enum Algorithm {
        ALGORITHM_UNSPECIFIED = 0,
        ALGORITHM_SHA1 = 1,
        ALGORITHM_SHA256 = 2,
        ALGORITHM_SHA512 = 3,
        ALGORITHM_MD5 = 4
    }
    export enum DigitCount {
        DIGIT_COUNT_UNSPECIFIED = 0,
        DIGIT_COUNT_SIX = 1,
        DIGIT_COUNT_EIGHT = 2
    }
    export enum OtpType {
        OTP_TYPE_UNSPECIFIED = 0,
        OTP_TYPE_HOTP = 1,
        OTP_TYPE_TOTP = 2
    }
    export class OtpParameters extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            secret?: Uint8Array;
            name?: string;
            issuer?: string;
            algorithm?: Payload.Algorithm;
            digits?: Payload.DigitCount;
            type?: Payload.OtpType;
            counter?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("secret" in data && data.secret != undefined) {
                    this.secret = data.secret;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("issuer" in data && data.issuer != undefined) {
                    this.issuer = data.issuer;
                }
                if ("algorithm" in data && data.algorithm != undefined) {
                    this.algorithm = data.algorithm;
                }
                if ("digits" in data && data.digits != undefined) {
                    this.digits = data.digits;
                }
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
                if ("counter" in data && data.counter != undefined) {
                    this.counter = data.counter;
                }
            }
        }
        get secret() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set secret(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get issuer() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set issuer(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get algorithm() {
            return pb_1.Message.getFieldWithDefault(this, 4, Payload.Algorithm.ALGORITHM_UNSPECIFIED) as Payload.Algorithm;
        }
        set algorithm(value: Payload.Algorithm) {
            pb_1.Message.setField(this, 4, value);
        }
        get digits() {
            return pb_1.Message.getFieldWithDefault(this, 5, Payload.DigitCount.DIGIT_COUNT_UNSPECIFIED) as Payload.DigitCount;
        }
        set digits(value: Payload.DigitCount) {
            pb_1.Message.setField(this, 5, value);
        }
        get type() {
            return pb_1.Message.getFieldWithDefault(this, 6, Payload.OtpType.OTP_TYPE_UNSPECIFIED) as Payload.OtpType;
        }
        set type(value: Payload.OtpType) {
            pb_1.Message.setField(this, 6, value);
        }
        get counter() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set counter(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        static fromObject(data: {
            secret?: Uint8Array;
            name?: string;
            issuer?: string;
            algorithm?: Payload.Algorithm;
            digits?: Payload.DigitCount;
            type?: Payload.OtpType;
            counter?: number;
        }): OtpParameters {
            const message = new OtpParameters({});
            if (data.secret != null) {
                message.secret = data.secret;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.issuer != null) {
                message.issuer = data.issuer;
            }
            if (data.algorithm != null) {
                message.algorithm = data.algorithm;
            }
            if (data.digits != null) {
                message.digits = data.digits;
            }
            if (data.type != null) {
                message.type = data.type;
            }
            if (data.counter != null) {
                message.counter = data.counter;
            }
            return message;
        }
        toObject() {
            const data: {
                secret?: Uint8Array;
                name?: string;
                issuer?: string;
                algorithm?: Payload.Algorithm;
                digits?: Payload.DigitCount;
                type?: Payload.OtpType;
                counter?: number;
            } = {};
            if (this.secret != null) {
                data.secret = this.secret;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.issuer != null) {
                data.issuer = this.issuer;
            }
            if (this.algorithm != null) {
                data.algorithm = this.algorithm;
            }
            if (this.digits != null) {
                data.digits = this.digits;
            }
            if (this.type != null) {
                data.type = this.type;
            }
            if (this.counter != null) {
                data.counter = this.counter;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.secret.length)
                writer.writeBytes(1, this.secret);
            if (this.name.length)
                writer.writeString(2, this.name);
            if (this.issuer.length)
                writer.writeString(3, this.issuer);
            if (this.algorithm != Payload.Algorithm.ALGORITHM_UNSPECIFIED)
                writer.writeEnum(4, this.algorithm);
            if (this.digits != Payload.DigitCount.DIGIT_COUNT_UNSPECIFIED)
                writer.writeEnum(5, this.digits);
            if (this.type != Payload.OtpType.OTP_TYPE_UNSPECIFIED)
                writer.writeEnum(6, this.type);
            if (this.counter != 0)
                writer.writeUint64(7, this.counter);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): OtpParameters {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new OtpParameters();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.secret = reader.readBytes();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        message.issuer = reader.readString();
                        break;
                    case 4:
                        message.algorithm = reader.readEnum();
                        break;
                    case 5:
                        message.digits = reader.readEnum();
                        break;
                    case 6:
                        message.type = reader.readEnum();
                        break;
                    case 7:
                        message.counter = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): OtpParameters {
            return OtpParameters.deserialize(bytes);
        }
    }
}
